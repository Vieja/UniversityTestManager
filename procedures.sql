-- -- noinspection SqlNoDataSourceInspectionForFile
--
-- create or replace procedure zaktualizuj_ocene1
-- (dataEgz in DATE) is
-- begin
--     update studenci s
--     set (s.ocena_1) = (
--         select p.ocena
--         from studenci ss, podejscia p, grupy g
--         where s.indeks = ss.indeks and ss.indeks = p.indeks
--           and p.id_grupy = g.id_grupy and g.data_egz = dataEgz)
--     where s.indeks in (
--         select sss.indeks
--         from studenci sss, podejscia pp, grupy gg, egzaminy e
--         where sss.indeks = pp.indeks and pp.id_grupy = gg.id_grupy
--           and gg.data_egz = e.data_egz and e.data_egz = dataEgz and e.termin = 'pierwszy');
-- end zaktualizuj_ocene1;
--
-- create or replace procedure zaktualizuj_ocene2
-- (dataEgz in DATE) is
-- begin
--     update studenci s
--     set (s.ocena_2) = (
--         select p.ocena
--         from studenci ss, podejscia p, grupy g
--         where s.indeks = ss.indeks and ss.indeks = p.indeks
--           and p.id_grupy = g.id_grupy and g.data_egz = dataEgz)
--     where s.indeks in (
--         select sss.indeks
--         from studenci sss, podejscia pp, grupy gg, egzaminy e
--         where sss.indeks = pp.indeks and pp.id_grupy = gg.id_grupy
--             and gg.data_egz = e.data_egz and e.data_egz = dataEgz and (e.termin = 'drugi') or (e.termin = 'trzeci'));
-- end zaktualizuj_ocene2;
-- /
--
-- create or replace procedure usun_tych_co_zdali is
-- begin
--     delete from studenci
--     where (ocena_1 is not null and ocena_1!='2.0') or (ocena_1 = '2.0' and ocena_2 is not null and ocena_2!='2.0');
-- end usun_tych_co_zdali;
-- /

-- create or replace procedure czysc_oceny_powtarzajacym is
-- begin
--     update studenci
--     set ocena_1 = null, ocena_2 = null
--     where (ocena_1='2.0' and ocena_2='2.0') or (ocena_1 = null and ocena_2='2.0');
-- end czysc_oceny_powtarzajacym;

-- CREATE OR REPLACE FUNCTION ilePunktowMaZestaw
-- (idZes IN VARCHAR2)
--     RETURN NUMBER IS
--     vPunkty NUMBER;
-- BEGIN
--     SELECT SUM(punkty)
--     INTO vPunkty
--     FROM zadania zad, zawartosc zaw
--     WHERE zad.id_zad = zaw.id_zad and zaw.zes_nazwa = idZes;
--     RETURN vPunkty;
-- END ilePunktowMaZestaw;
--
--declare
-- vIle NUMBER;
--begin
--vIle := ilePunktowMaZestaw(1);
--end;

-- begin
-- --zaktualizuj_ocene1(to_date('05-12-2019','DD-MM-YYYY'));
-- --usun_tych_co_zdali();
-- end;
--
-- -- znajdz pytania, jakie mial student w przeszlosci
-- select distinct zaw.id_zad
-- from podejscia p, zestawy zes, zawartosc zaw
-- where p.id_zes = zes.id_zes and zes.id_zes = zaw.id_zes
--     and p.indeks = id_studenta and (current_date - p.data_pod) YEAR TO MONTH < INTERVAL '1-6' YEAR TO MONTH;

-- CREATE OR REPLACE FUNCTION iluStudentowPodeszloDoEgzaminu
-- (dataEgz in DATE)
--     RETURN NUMBER IS
--     liczba NUMBER;
-- BEGIN
--     SELECT COUNT(pod.indeks)
--     INTO liczba
--     FROM grupy gr, podejscia pod
--     WHERE gr.id_grupy = pod.id_grupy and gr.data_egz = dataEgz;
--     RETURN liczba;
-- END iluStudentowPodeszloDoEgzaminu;
